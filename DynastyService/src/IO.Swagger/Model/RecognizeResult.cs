/* 
 * Betaface API 2.0
 *
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// represents a recognition result for a single face.
    /// </summary>
    [DataContract]
    public partial class RecognizeResult :  IEquatable<RecognizeResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecognizeResult" /> class.
        /// </summary>
        /// <param name="faceUuid">face unique identifier..</param>
        /// <param name="matches">list of closest matches sorted by recognition score in descending order..</param>
        public RecognizeResult(Guid? faceUuid = default(Guid?), List<Match> matches = default(List<Match>))
        {
            this.FaceUuid = faceUuid;
            this.Matches = matches;
        }
        
        /// <summary>
        /// face unique identifier.
        /// </summary>
        /// <value>face unique identifier.</value>
        [DataMember(Name="face_uuid", EmitDefaultValue=false)]
        public Guid? FaceUuid { get; set; }

        /// <summary>
        /// list of closest matches sorted by recognition score in descending order.
        /// </summary>
        /// <value>list of closest matches sorted by recognition score in descending order.</value>
        [DataMember(Name="matches", EmitDefaultValue=false)]
        public List<Match> Matches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecognizeResult {\n");
            sb.Append("  FaceUuid: ").Append(FaceUuid).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecognizeResult);
        }

        /// <summary>
        /// Returns true if RecognizeResult instances are equal
        /// </summary>
        /// <param name="input">Instance of RecognizeResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecognizeResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FaceUuid == input.FaceUuid ||
                    (this.FaceUuid != null &&
                    this.FaceUuid.Equals(input.FaceUuid))
                ) && 
                (
                    this.Matches == input.Matches ||
                    this.Matches != null &&
                    this.Matches.SequenceEqual(input.Matches)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FaceUuid != null)
                    hashCode = hashCode * 59 + this.FaceUuid.GetHashCode();
                if (this.Matches != null)
                    hashCode = hashCode * 59 + this.Matches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
