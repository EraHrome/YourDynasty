/* 
 * Betaface API 2.0
 *
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// represents a single match.
    /// </summary>
    [DataContract]
    public partial class Match :  IEquatable<Match>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Match" /> class.
        /// </summary>
        /// <param name="faceUuid">matching face unique identifier..</param>
        /// <param name="confidence">match confidence (recognition score)..</param>
        /// <param name="isMatch">decision is it same person or not based on match confidence with threshold measured on small and medium sized test collections..</param>
        /// <param name="personId">person id assigned to matching face, if any..</param>
        public Match(Guid? faceUuid = default(Guid?), double? confidence = default(double?), bool? isMatch = default(bool?), string personId = default(string))
        {
            this.FaceUuid = faceUuid;
            this.Confidence = confidence;
            this.IsMatch = isMatch;
            this.PersonId = personId;
        }
        
        /// <summary>
        /// matching face unique identifier.
        /// </summary>
        /// <value>matching face unique identifier.</value>
        [DataMember(Name="face_uuid", EmitDefaultValue=false)]
        public Guid? FaceUuid { get; set; }

        /// <summary>
        /// match confidence (recognition score).
        /// </summary>
        /// <value>match confidence (recognition score).</value>
        [DataMember(Name="confidence", EmitDefaultValue=false)]
        public double? Confidence { get; set; }

        /// <summary>
        /// decision is it same person or not based on match confidence with threshold measured on small and medium sized test collections.
        /// </summary>
        /// <value>decision is it same person or not based on match confidence with threshold measured on small and medium sized test collections.</value>
        [DataMember(Name="is_match", EmitDefaultValue=false)]
        public bool? IsMatch { get; set; }

        /// <summary>
        /// person id assigned to matching face, if any.
        /// </summary>
        /// <value>person id assigned to matching face, if any.</value>
        [DataMember(Name="person_id", EmitDefaultValue=false)]
        public string PersonId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Match {\n");
            sb.Append("  FaceUuid: ").Append(FaceUuid).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  IsMatch: ").Append(IsMatch).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Match);
        }

        /// <summary>
        /// Returns true if Match instances are equal
        /// </summary>
        /// <param name="input">Instance of Match to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Match input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FaceUuid == input.FaceUuid ||
                    (this.FaceUuid != null &&
                    this.FaceUuid.Equals(input.FaceUuid))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.IsMatch == input.IsMatch ||
                    (this.IsMatch != null &&
                    this.IsMatch.Equals(input.IsMatch))
                ) && 
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != null &&
                    this.PersonId.Equals(input.PersonId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FaceUuid != null)
                    hashCode = hashCode * 59 + this.FaceUuid.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.IsMatch != null)
                    hashCode = hashCode * 59 + this.IsMatch.GetHashCode();
                if (this.PersonId != null)
                    hashCode = hashCode * 59 + this.PersonId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
