/* 
 * Betaface API 2.0
 *
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// represents a manually labelled face information. face bounding box will be estimated if not provided. minimum 3 points (eyes, mouth) are required.
    /// </summary>
    [DataContract]
    public partial class NewFace :  IEquatable<NewFace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewFace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewFace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewFace" /> class.
        /// </summary>
        /// <param name="x">x coordinate of the face bounding box center in pixels..</param>
        /// <param name="y">y coordinate of the face bounding box center in pixels..</param>
        /// <param name="width">width of the face bounding box center in pixels..</param>
        /// <param name="height">height of the face bounding box center in pixels..</param>
        /// <param name="angle">in-plane rotation (roll) of the face bounding box center in degrees..</param>
        /// <param name="points">face points. you have to specify minimum 3 points coordinates - type 512 (left eye), type 768 (right eye), type 2816 (mouth). point names are not required. (required).</param>
        /// <param name="tags">(optional) face tags or labels to set manually..</param>
        /// <param name="setPersonId">(optional) manually assign person id in format name@namespace..</param>
        public NewFace(double? x = default(double?), double? y = default(double?), double? width = default(double?), double? height = default(double?), double? angle = default(double?), List<Point> points = default(List<Point>), List<Tag> tags = default(List<Tag>), string setPersonId = default(string))
        {
            // to ensure "points" is required (not null)
            if (points == null)
            {
                throw new InvalidDataException("points is a required property for NewFace and cannot be null");
            }
            else
            {
                this.Points = points;
            }
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
            this.Angle = angle;
            this.Tags = tags;
            this.SetPersonId = setPersonId;
        }
        
        /// <summary>
        /// x coordinate of the face bounding box center in pixels.
        /// </summary>
        /// <value>x coordinate of the face bounding box center in pixels.</value>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public double? X { get; set; }

        /// <summary>
        /// y coordinate of the face bounding box center in pixels.
        /// </summary>
        /// <value>y coordinate of the face bounding box center in pixels.</value>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public double? Y { get; set; }

        /// <summary>
        /// width of the face bounding box center in pixels.
        /// </summary>
        /// <value>width of the face bounding box center in pixels.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public double? Width { get; set; }

        /// <summary>
        /// height of the face bounding box center in pixels.
        /// </summary>
        /// <value>height of the face bounding box center in pixels.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public double? Height { get; set; }

        /// <summary>
        /// in-plane rotation (roll) of the face bounding box center in degrees.
        /// </summary>
        /// <value>in-plane rotation (roll) of the face bounding box center in degrees.</value>
        [DataMember(Name="angle", EmitDefaultValue=false)]
        public double? Angle { get; set; }

        /// <summary>
        /// face points. you have to specify minimum 3 points coordinates - type 512 (left eye), type 768 (right eye), type 2816 (mouth). point names are not required.
        /// </summary>
        /// <value>face points. you have to specify minimum 3 points coordinates - type 512 (left eye), type 768 (right eye), type 2816 (mouth). point names are not required.</value>
        [DataMember(Name="points", EmitDefaultValue=false)]
        public List<Point> Points { get; set; }

        /// <summary>
        /// (optional) face tags or labels to set manually.
        /// </summary>
        /// <value>(optional) face tags or labels to set manually.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// (optional) manually assign person id in format name@namespace.
        /// </summary>
        /// <value>(optional) manually assign person id in format name@namespace.</value>
        [DataMember(Name="set_person_id", EmitDefaultValue=false)]
        public string SetPersonId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewFace {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  SetPersonId: ").Append(SetPersonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewFace);
        }

        /// <summary>
        /// Returns true if NewFace instances are equal
        /// </summary>
        /// <param name="input">Instance of NewFace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewFace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Angle == input.Angle ||
                    (this.Angle != null &&
                    this.Angle.Equals(input.Angle))
                ) && 
                (
                    this.Points == input.Points ||
                    this.Points != null &&
                    this.Points.SequenceEqual(input.Points)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.SetPersonId == input.SetPersonId ||
                    (this.SetPersonId != null &&
                    this.SetPersonId.Equals(input.SetPersonId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Angle != null)
                    hashCode = hashCode * 59 + this.Angle.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.SetPersonId != null)
                    hashCode = hashCode * 59 + this.SetPersonId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
