/* 
 * Betaface API 2.0
 *
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// represents a recognition request for one or more faces.
    /// </summary>
    [DataContract]
    public partial class TransformRequest :  IEquatable<TransformRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransformRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransformRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransformRequest" /> class.
        /// </summary>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236 (required).</param>
        /// <param name="facesUuids">list of face unique identifiers that should be transformed. (required).</param>
        /// <param name="action">transform action, currently supported action 0 (average faces) (required).</param>
        /// <param name="parameters">(optional) transform action parameters.</param>
        public TransformRequest(Guid? apiKey = default(Guid?), List<Guid?> facesUuids = default(List<Guid?>), int? action = default(int?), string parameters = default(string))
        {
            // to ensure "apiKey" is required (not null)
            if (apiKey == null)
            {
                throw new InvalidDataException("apiKey is a required property for TransformRequest and cannot be null");
            }
            else
            {
                this.ApiKey = apiKey;
            }
            // to ensure "facesUuids" is required (not null)
            if (facesUuids == null)
            {
                throw new InvalidDataException("facesUuids is a required property for TransformRequest and cannot be null");
            }
            else
            {
                this.FacesUuids = facesUuids;
            }
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for TransformRequest and cannot be null");
            }
            else
            {
                this.Action = action;
            }
            this.Parameters = parameters;
        }
        
        /// <summary>
        /// your API key or d45fd466-51e2-4701-8da8-04351c872236
        /// </summary>
        /// <value>your API key or d45fd466-51e2-4701-8da8-04351c872236</value>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public Guid? ApiKey { get; set; }

        /// <summary>
        /// list of face unique identifiers that should be transformed.
        /// </summary>
        /// <value>list of face unique identifiers that should be transformed.</value>
        [DataMember(Name="faces_uuids", EmitDefaultValue=false)]
        public List<Guid?> FacesUuids { get; set; }

        /// <summary>
        /// transform action, currently supported action 0 (average faces)
        /// </summary>
        /// <value>transform action, currently supported action 0 (average faces)</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public int? Action { get; set; }

        /// <summary>
        /// (optional) transform action parameters
        /// </summary>
        /// <value>(optional) transform action parameters</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public string Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransformRequest {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  FacesUuids: ").Append(FacesUuids).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransformRequest);
        }

        /// <summary>
        /// Returns true if TransformRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransformRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransformRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.FacesUuids == input.FacesUuids ||
                    this.FacesUuids != null &&
                    this.FacesUuids.SequenceEqual(input.FacesUuids)
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.FacesUuids != null)
                    hashCode = hashCode * 59 + this.FacesUuids.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
