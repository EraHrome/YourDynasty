/* 
 * Betaface API 2.0
 *
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// represents a media information.
    /// </summary>
    [DataContract]
    public partial class Media :  IEquatable<Media>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Media" /> class.
        /// </summary>
        /// <param name="mediaUuid">media unique identifier..</param>
        /// <param name="checksum">media content hash value..</param>
        /// <param name="faces">collection of detected or labelled faces..</param>
        /// <param name="tags">collection of media tags..</param>
        /// <param name="originalFilename">reference original media filename, path, uri or your application specific id that was provided during media upload..</param>
        /// <param name="duration">reserved for future video processing.</param>
        public Media(Guid? mediaUuid = default(Guid?), string checksum = default(string), List<Face> faces = default(List<Face>), List<TagMedia> tags = default(List<TagMedia>), string originalFilename = default(string), string duration = default(string))
        {
            this.MediaUuid = mediaUuid;
            this.Checksum = checksum;
            this.Faces = faces;
            this.Tags = tags;
            this.OriginalFilename = originalFilename;
            this.Duration = duration;
        }
        
        /// <summary>
        /// media unique identifier.
        /// </summary>
        /// <value>media unique identifier.</value>
        [DataMember(Name="media_uuid", EmitDefaultValue=false)]
        public Guid? MediaUuid { get; set; }

        /// <summary>
        /// media content hash value.
        /// </summary>
        /// <value>media content hash value.</value>
        [DataMember(Name="checksum", EmitDefaultValue=false)]
        public string Checksum { get; set; }

        /// <summary>
        /// collection of detected or labelled faces.
        /// </summary>
        /// <value>collection of detected or labelled faces.</value>
        [DataMember(Name="faces", EmitDefaultValue=false)]
        public List<Face> Faces { get; set; }

        /// <summary>
        /// collection of media tags.
        /// </summary>
        /// <value>collection of media tags.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<TagMedia> Tags { get; set; }

        /// <summary>
        /// reference original media filename, path, uri or your application specific id that was provided during media upload.
        /// </summary>
        /// <value>reference original media filename, path, uri or your application specific id that was provided during media upload.</value>
        [DataMember(Name="original_filename", EmitDefaultValue=false)]
        public string OriginalFilename { get; set; }

        /// <summary>
        /// reserved for future video processing
        /// </summary>
        /// <value>reserved for future video processing</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Media {\n");
            sb.Append("  MediaUuid: ").Append(MediaUuid).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  Faces: ").Append(Faces).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  OriginalFilename: ").Append(OriginalFilename).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Media);
        }

        /// <summary>
        /// Returns true if Media instances are equal
        /// </summary>
        /// <param name="input">Instance of Media to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Media input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MediaUuid == input.MediaUuid ||
                    (this.MediaUuid != null &&
                    this.MediaUuid.Equals(input.MediaUuid))
                ) && 
                (
                    this.Checksum == input.Checksum ||
                    (this.Checksum != null &&
                    this.Checksum.Equals(input.Checksum))
                ) && 
                (
                    this.Faces == input.Faces ||
                    this.Faces != null &&
                    this.Faces.SequenceEqual(input.Faces)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.OriginalFilename == input.OriginalFilename ||
                    (this.OriginalFilename != null &&
                    this.OriginalFilename.Equals(input.OriginalFilename))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MediaUuid != null)
                    hashCode = hashCode * 59 + this.MediaUuid.GetHashCode();
                if (this.Checksum != null)
                    hashCode = hashCode * 59 + this.Checksum.GetHashCode();
                if (this.Faces != null)
                    hashCode = hashCode * 59 + this.Faces.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.OriginalFilename != null)
                    hashCode = hashCode * 59 + this.OriginalFilename.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Checksum (string) maxLength
            if(this.Checksum != null && this.Checksum.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Checksum, length must be less than 64.", new [] { "Checksum" });
            }

            // Checksum (string) minLength
            if(this.Checksum != null && this.Checksum.Length < 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Checksum, length must be greater than 64.", new [] { "Checksum" });
            }

            // OriginalFilename (string) maxLength
            if(this.OriginalFilename != null && this.OriginalFilename.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OriginalFilename, length must be less than 1024.", new [] { "OriginalFilename" });
            }

            // OriginalFilename (string) minLength
            if(this.OriginalFilename != null && this.OriginalFilename.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OriginalFilename, length must be greater than 0.", new [] { "OriginalFilename" });
            }

            yield break;
        }
    }

}
