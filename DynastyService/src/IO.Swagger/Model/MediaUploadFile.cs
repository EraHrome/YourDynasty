/* 
 * Betaface API 2.0
 *
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// represents a media file upload message multipart/form-data parameters.
    /// </summary>
    [DataContract]
    public partial class MediaUploadFile :  IEquatable<MediaUploadFile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaUploadFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MediaUploadFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaUploadFile" /> class.
        /// </summary>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236 (required).</param>
        /// <param name="detectionFlags">(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot;.</param>
        /// <param name="detectionMinScore">(optional) filter faces with detection score lower than min_score..</param>
        /// <param name="detectionNewFaces">(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;}.</param>
        /// <param name="setPersonId">(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot;.</param>
        /// <param name="recognizeTargets">(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot;.</param>
        /// <param name="recognizeParameters">(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot;.</param>
        /// <param name="originalFilename">(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference..</param>
        public MediaUploadFile(Guid? apiKey = default(Guid?), string detectionFlags = default(string), double? detectionMinScore = default(double?), string detectionNewFaces = default(string), string setPersonId = default(string), string recognizeTargets = default(string), string recognizeParameters = default(string), string originalFilename = default(string))
        {
            // to ensure "apiKey" is required (not null)
            if (apiKey == null)
            {
                throw new InvalidDataException("apiKey is a required property for MediaUploadFile and cannot be null");
            }
            else
            {
                this.ApiKey = apiKey;
            }
            this.DetectionFlags = detectionFlags;
            this.DetectionMinScore = detectionMinScore;
            this.DetectionNewFaces = detectionNewFaces;
            this.SetPersonId = setPersonId;
            this.RecognizeTargets = recognizeTargets;
            this.RecognizeParameters = recognizeParameters;
            this.OriginalFilename = originalFilename;
        }
        
        /// <summary>
        /// your API key or d45fd466-51e2-4701-8da8-04351c872236
        /// </summary>
        /// <value>your API key or d45fd466-51e2-4701-8da8-04351c872236</value>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public Guid? ApiKey { get; set; }

        /// <summary>
        /// (optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot;
        /// </summary>
        /// <value>(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot;</value>
        [DataMember(Name="detection_flags", EmitDefaultValue=false)]
        public string DetectionFlags { get; set; }

        /// <summary>
        /// (optional) filter faces with detection score lower than min_score.
        /// </summary>
        /// <value>(optional) filter faces with detection score lower than min_score.</value>
        [DataMember(Name="detection_min_score", EmitDefaultValue=false)]
        public double? DetectionMinScore { get; set; }

        /// <summary>
        /// (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;}
        /// </summary>
        /// <value>(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;}</value>
        [DataMember(Name="detection_new_faces", EmitDefaultValue=false)]
        public string DetectionNewFaces { get; set; }

        /// <summary>
        /// (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot;
        /// </summary>
        /// <value>(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot;</value>
        [DataMember(Name="set_person_id", EmitDefaultValue=false)]
        public string SetPersonId { get; set; }

        /// <summary>
        /// (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot;
        /// </summary>
        /// <value>(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot;</value>
        [DataMember(Name="recognize_targets", EmitDefaultValue=false)]
        public string RecognizeTargets { get; set; }

        /// <summary>
        /// (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot;
        /// </summary>
        /// <value>(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot;</value>
        [DataMember(Name="recognize_parameters", EmitDefaultValue=false)]
        public string RecognizeParameters { get; set; }

        /// <summary>
        /// (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference.
        /// </summary>
        /// <value>(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference.</value>
        [DataMember(Name="original_filename", EmitDefaultValue=false)]
        public string OriginalFilename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaUploadFile {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  DetectionFlags: ").Append(DetectionFlags).Append("\n");
            sb.Append("  DetectionMinScore: ").Append(DetectionMinScore).Append("\n");
            sb.Append("  DetectionNewFaces: ").Append(DetectionNewFaces).Append("\n");
            sb.Append("  SetPersonId: ").Append(SetPersonId).Append("\n");
            sb.Append("  RecognizeTargets: ").Append(RecognizeTargets).Append("\n");
            sb.Append("  RecognizeParameters: ").Append(RecognizeParameters).Append("\n");
            sb.Append("  OriginalFilename: ").Append(OriginalFilename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaUploadFile);
        }

        /// <summary>
        /// Returns true if MediaUploadFile instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaUploadFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaUploadFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.DetectionFlags == input.DetectionFlags ||
                    (this.DetectionFlags != null &&
                    this.DetectionFlags.Equals(input.DetectionFlags))
                ) && 
                (
                    this.DetectionMinScore == input.DetectionMinScore ||
                    (this.DetectionMinScore != null &&
                    this.DetectionMinScore.Equals(input.DetectionMinScore))
                ) && 
                (
                    this.DetectionNewFaces == input.DetectionNewFaces ||
                    (this.DetectionNewFaces != null &&
                    this.DetectionNewFaces.Equals(input.DetectionNewFaces))
                ) && 
                (
                    this.SetPersonId == input.SetPersonId ||
                    (this.SetPersonId != null &&
                    this.SetPersonId.Equals(input.SetPersonId))
                ) && 
                (
                    this.RecognizeTargets == input.RecognizeTargets ||
                    (this.RecognizeTargets != null &&
                    this.RecognizeTargets.Equals(input.RecognizeTargets))
                ) && 
                (
                    this.RecognizeParameters == input.RecognizeParameters ||
                    (this.RecognizeParameters != null &&
                    this.RecognizeParameters.Equals(input.RecognizeParameters))
                ) && 
                (
                    this.OriginalFilename == input.OriginalFilename ||
                    (this.OriginalFilename != null &&
                    this.OriginalFilename.Equals(input.OriginalFilename))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.DetectionFlags != null)
                    hashCode = hashCode * 59 + this.DetectionFlags.GetHashCode();
                if (this.DetectionMinScore != null)
                    hashCode = hashCode * 59 + this.DetectionMinScore.GetHashCode();
                if (this.DetectionNewFaces != null)
                    hashCode = hashCode * 59 + this.DetectionNewFaces.GetHashCode();
                if (this.SetPersonId != null)
                    hashCode = hashCode * 59 + this.SetPersonId.GetHashCode();
                if (this.RecognizeTargets != null)
                    hashCode = hashCode * 59 + this.RecognizeTargets.GetHashCode();
                if (this.RecognizeParameters != null)
                    hashCode = hashCode * 59 + this.RecognizeParameters.GetHashCode();
                if (this.OriginalFilename != null)
                    hashCode = hashCode * 59 + this.OriginalFilename.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
