/* 
 * Betaface API 2.0
 *
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MediaUploadResponse
    /// </summary>
    [DataContract]
    public partial class MediaUploadResponse :  IEquatable<MediaUploadResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaUploadResponse" /> class.
        /// </summary>
        /// <param name="media">media information..</param>
        /// <param name="recognize">recognition results..</param>
        public MediaUploadResponse(Media media = default(Media), Recognize recognize = default(Recognize))
        {
            this.Media = media;
            this.Recognize = recognize;
        }
        
        /// <summary>
        /// media information.
        /// </summary>
        /// <value>media information.</value>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public Media Media { get; set; }

        /// <summary>
        /// recognition results.
        /// </summary>
        /// <value>recognition results.</value>
        [DataMember(Name="recognize", EmitDefaultValue=false)]
        public Recognize Recognize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaUploadResponse {\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Recognize: ").Append(Recognize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaUploadResponse);
        }

        /// <summary>
        /// Returns true if MediaUploadResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaUploadResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaUploadResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.Recognize == input.Recognize ||
                    (this.Recognize != null &&
                    this.Recognize.Equals(input.Recognize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.Recognize != null)
                    hashCode = hashCode * 59 + this.Recognize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
