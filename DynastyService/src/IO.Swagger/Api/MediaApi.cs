/* 
 * Betaface API 2.0
 *
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// upload media file using multipart/form-data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="_file">a media file to upload</param>
        /// <param name="detectionFlags">(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)</param>
        /// <param name="detectionMinScore">(optional) filter faces with detection score lower than min_score. (optional)</param>
        /// <param name="detectionNewFaces">(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)</param>
        /// <param name="setPersonId">(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)</param>
        /// <param name="recognizeTargets">(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)</param>
        /// <param name="recognizeParameters">(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)</param>
        /// <param name="originalFilename">(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)</param>
        /// <returns>MediaUploadResponse</returns>
        MediaUploadResponse V2MediaFilePost (Guid? apiKey, System.IO.Stream _file, string detectionFlags = null, double? detectionMinScore = null, string detectionNewFaces = null, string setPersonId = null, string recognizeTargets = null, string recognizeParameters = null, string originalFilename = null);

        /// <summary>
        /// upload media file using multipart/form-data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="_file">a media file to upload</param>
        /// <param name="detectionFlags">(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)</param>
        /// <param name="detectionMinScore">(optional) filter faces with detection score lower than min_score. (optional)</param>
        /// <param name="detectionNewFaces">(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)</param>
        /// <param name="setPersonId">(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)</param>
        /// <param name="recognizeTargets">(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)</param>
        /// <param name="recognizeParameters">(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)</param>
        /// <param name="originalFilename">(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)</param>
        /// <returns>ApiResponse of MediaUploadResponse</returns>
        ApiResponse<MediaUploadResponse> V2MediaFilePostWithHttpInfo (Guid? apiKey, System.IO.Stream _file, string detectionFlags = null, double? detectionMinScore = null, string detectionNewFaces = null, string setPersonId = null, string recognizeTargets = null, string recognizeParameters = null, string originalFilename = null);
        /// <summary>
        /// gets a media information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="mediaUuid">the requested media identifier.</param>
        /// <returns>Media</returns>
        Media V2MediaGet (Guid? apiKey, Guid? mediaUuid);

        /// <summary>
        /// gets a media information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="mediaUuid">the requested media identifier.</param>
        /// <returns>ApiResponse of Media</returns>
        ApiResponse<Media> V2MediaGetWithHttpInfo (Guid? apiKey, Guid? mediaUuid);
        /// <summary>
        /// gets a media information using SHA256 hash of media file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="checksum">SHA256 media file hash.</param>
        /// <returns>Media</returns>
        Media V2MediaHashGet (Guid? apiKey, string checksum);

        /// <summary>
        /// gets a media information using SHA256 hash of media file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="checksum">SHA256 media file hash.</param>
        /// <returns>ApiResponse of Media</returns>
        ApiResponse<Media> V2MediaHashGetWithHttpInfo (Guid? apiKey, string checksum);
        /// <summary>
        /// upload media file using file uri or file content as base64 encoded string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request json body with parameters. (optional)</param>
        /// <returns>MediaUploadResponse</returns>
        MediaUploadResponse V2MediaPost (MediaUpload body = null);

        /// <summary>
        /// upload media file using file uri or file content as base64 encoded string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request json body with parameters. (optional)</param>
        /// <returns>ApiResponse of MediaUploadResponse</returns>
        ApiResponse<MediaUploadResponse> V2MediaPostWithHttpInfo (MediaUpload body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// upload media file using multipart/form-data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="_file">a media file to upload</param>
        /// <param name="detectionFlags">(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)</param>
        /// <param name="detectionMinScore">(optional) filter faces with detection score lower than min_score. (optional)</param>
        /// <param name="detectionNewFaces">(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)</param>
        /// <param name="setPersonId">(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)</param>
        /// <param name="recognizeTargets">(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)</param>
        /// <param name="recognizeParameters">(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)</param>
        /// <param name="originalFilename">(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)</param>
        /// <returns>Task of MediaUploadResponse</returns>
        System.Threading.Tasks.Task<MediaUploadResponse> V2MediaFilePostAsync (Guid? apiKey, System.IO.Stream _file, string detectionFlags = null, double? detectionMinScore = null, string detectionNewFaces = null, string setPersonId = null, string recognizeTargets = null, string recognizeParameters = null, string originalFilename = null);

        /// <summary>
        /// upload media file using multipart/form-data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="_file">a media file to upload</param>
        /// <param name="detectionFlags">(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)</param>
        /// <param name="detectionMinScore">(optional) filter faces with detection score lower than min_score. (optional)</param>
        /// <param name="detectionNewFaces">(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)</param>
        /// <param name="setPersonId">(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)</param>
        /// <param name="recognizeTargets">(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)</param>
        /// <param name="recognizeParameters">(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)</param>
        /// <param name="originalFilename">(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)</param>
        /// <returns>Task of ApiResponse (MediaUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaUploadResponse>> V2MediaFilePostAsyncWithHttpInfo (Guid? apiKey, System.IO.Stream _file, string detectionFlags = null, double? detectionMinScore = null, string detectionNewFaces = null, string setPersonId = null, string recognizeTargets = null, string recognizeParameters = null, string originalFilename = null);
        /// <summary>
        /// gets a media information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="mediaUuid">the requested media identifier.</param>
        /// <returns>Task of Media</returns>
        System.Threading.Tasks.Task<Media> V2MediaGetAsync (Guid? apiKey, Guid? mediaUuid);

        /// <summary>
        /// gets a media information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="mediaUuid">the requested media identifier.</param>
        /// <returns>Task of ApiResponse (Media)</returns>
        System.Threading.Tasks.Task<ApiResponse<Media>> V2MediaGetAsyncWithHttpInfo (Guid? apiKey, Guid? mediaUuid);
        /// <summary>
        /// gets a media information using SHA256 hash of media file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="checksum">SHA256 media file hash.</param>
        /// <returns>Task of Media</returns>
        System.Threading.Tasks.Task<Media> V2MediaHashGetAsync (Guid? apiKey, string checksum);

        /// <summary>
        /// gets a media information using SHA256 hash of media file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="checksum">SHA256 media file hash.</param>
        /// <returns>Task of ApiResponse (Media)</returns>
        System.Threading.Tasks.Task<ApiResponse<Media>> V2MediaHashGetAsyncWithHttpInfo (Guid? apiKey, string checksum);
        /// <summary>
        /// upload media file using file uri or file content as base64 encoded string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request json body with parameters. (optional)</param>
        /// <returns>Task of MediaUploadResponse</returns>
        System.Threading.Tasks.Task<MediaUploadResponse> V2MediaPostAsync (MediaUpload body = null);

        /// <summary>
        /// upload media file using file uri or file content as base64 encoded string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request json body with parameters. (optional)</param>
        /// <returns>Task of ApiResponse (MediaUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaUploadResponse>> V2MediaPostAsyncWithHttpInfo (MediaUpload body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaApi : IMediaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// upload media file using multipart/form-data 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="_file">a media file to upload</param>
        /// <param name="detectionFlags">(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)</param>
        /// <param name="detectionMinScore">(optional) filter faces with detection score lower than min_score. (optional)</param>
        /// <param name="detectionNewFaces">(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)</param>
        /// <param name="setPersonId">(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)</param>
        /// <param name="recognizeTargets">(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)</param>
        /// <param name="recognizeParameters">(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)</param>
        /// <param name="originalFilename">(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)</param>
        /// <returns>MediaUploadResponse</returns>
        public MediaUploadResponse V2MediaFilePost (Guid? apiKey, System.IO.Stream _file, string detectionFlags = null, double? detectionMinScore = null, string detectionNewFaces = null, string setPersonId = null, string recognizeTargets = null, string recognizeParameters = null, string originalFilename = null)
        {
             ApiResponse<MediaUploadResponse> localVarResponse = V2MediaFilePostWithHttpInfo(apiKey, _file, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename);
             return localVarResponse.Data;
        }

        /// <summary>
        /// upload media file using multipart/form-data 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="_file">a media file to upload</param>
        /// <param name="detectionFlags">(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)</param>
        /// <param name="detectionMinScore">(optional) filter faces with detection score lower than min_score. (optional)</param>
        /// <param name="detectionNewFaces">(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)</param>
        /// <param name="setPersonId">(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)</param>
        /// <param name="recognizeTargets">(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)</param>
        /// <param name="recognizeParameters">(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)</param>
        /// <param name="originalFilename">(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)</param>
        /// <returns>ApiResponse of MediaUploadResponse</returns>
        public ApiResponse< MediaUploadResponse > V2MediaFilePostWithHttpInfo (Guid? apiKey, System.IO.Stream _file, string detectionFlags = null, double? detectionMinScore = null, string detectionNewFaces = null, string setPersonId = null, string recognizeTargets = null, string recognizeParameters = null, string originalFilename = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MediaApi->V2MediaFilePost");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling MediaApi->V2MediaFilePost");

            var localVarPath = "/v2/media/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (detectionFlags != null) localVarFormParams.Add("detection_flags", this.Configuration.ApiClient.ParameterToString(detectionFlags)); // form parameter
            if (detectionMinScore != null) localVarFormParams.Add("detection_min_score", this.Configuration.ApiClient.ParameterToString(detectionMinScore)); // form parameter
            if (detectionNewFaces != null) localVarFormParams.Add("detection_new_faces", this.Configuration.ApiClient.ParameterToString(detectionNewFaces)); // form parameter
            if (setPersonId != null) localVarFormParams.Add("set_person_id", this.Configuration.ApiClient.ParameterToString(setPersonId)); // form parameter
            if (recognizeTargets != null) localVarFormParams.Add("recognize_targets", this.Configuration.ApiClient.ParameterToString(recognizeTargets)); // form parameter
            if (recognizeParameters != null) localVarFormParams.Add("recognize_parameters", this.Configuration.ApiClient.ParameterToString(recognizeParameters)); // form parameter
            if (originalFilename != null) localVarFormParams.Add("original_filename", this.Configuration.ApiClient.ParameterToString(originalFilename)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2MediaFilePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaUploadResponse)));
        }

        /// <summary>
        /// upload media file using multipart/form-data 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="_file">a media file to upload</param>
        /// <param name="detectionFlags">(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)</param>
        /// <param name="detectionMinScore">(optional) filter faces with detection score lower than min_score. (optional)</param>
        /// <param name="detectionNewFaces">(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)</param>
        /// <param name="setPersonId">(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)</param>
        /// <param name="recognizeTargets">(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)</param>
        /// <param name="recognizeParameters">(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)</param>
        /// <param name="originalFilename">(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)</param>
        /// <returns>Task of MediaUploadResponse</returns>
        public async System.Threading.Tasks.Task<MediaUploadResponse> V2MediaFilePostAsync (Guid? apiKey, System.IO.Stream _file, string detectionFlags = null, double? detectionMinScore = null, string detectionNewFaces = null, string setPersonId = null, string recognizeTargets = null, string recognizeParameters = null, string originalFilename = null)
        {
             ApiResponse<MediaUploadResponse> localVarResponse = await V2MediaFilePostAsyncWithHttpInfo(apiKey, _file, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename);
             return localVarResponse.Data;

        }

        /// <summary>
        /// upload media file using multipart/form-data 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="_file">a media file to upload</param>
        /// <param name="detectionFlags">(optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \&quot;basicpoints,propoints,classifiers,content\&quot; (optional)</param>
        /// <param name="detectionMinScore">(optional) filter faces with detection score lower than min_score. (optional)</param>
        /// <param name="detectionNewFaces">(optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide a list of new faces as a string of comma separated entries with following template: { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;width\&quot;: 0, \&quot;height\&quot;: 0, \&quot;angle\&quot;: 0, \&quot;points\&quot;: [ { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }, { \&quot;x\&quot;: 0, \&quot;y\&quot;: 0, \&quot;type\&quot;: 0 }], \&quot;tags\&quot;: [ { \&quot;name\&quot;: \&quot;\&quot;,  \&quot;value\&quot;: \&quot;\&quot;,  \&quot;confidence\&quot;: 1.0 }, {\&quot;name\&quot;: \&quot;\&quot;, \&quot;value\&quot;: \&quot;\&quot;, \&quot;confidence\&quot;: 1.0 } ], \&quot;set_person_id\&quot;: \&quot;\&quot;} (optional)</param>
        /// <param name="setPersonId">(optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter. you can use special name random@namespace to assign random unique name to each face in specific namespace.  for example: \&quot;John Doe@mynamespace\&quot; (optional)</param>
        /// <param name="recognizeTargets">(optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).  provide a list of targets as comma separated string, for example \&quot;all@mynamespace,John Doe@othernamespace\&quot; (optional)</param>
        /// <param name="recognizeParameters">(optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \&quot;min_match_score:0.4,min_score:0.2,gender:male,race:white\&quot; (optional)</param>
        /// <param name="originalFilename">(optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference. (optional)</param>
        /// <returns>Task of ApiResponse (MediaUploadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaUploadResponse>> V2MediaFilePostAsyncWithHttpInfo (Guid? apiKey, System.IO.Stream _file, string detectionFlags = null, double? detectionMinScore = null, string detectionNewFaces = null, string setPersonId = null, string recognizeTargets = null, string recognizeParameters = null, string originalFilename = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MediaApi->V2MediaFilePost");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling MediaApi->V2MediaFilePost");

            var localVarPath = "/v2/media/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (detectionFlags != null) localVarFormParams.Add("detection_flags", this.Configuration.ApiClient.ParameterToString(detectionFlags)); // form parameter
            if (detectionMinScore != null) localVarFormParams.Add("detection_min_score", this.Configuration.ApiClient.ParameterToString(detectionMinScore)); // form parameter
            if (detectionNewFaces != null) localVarFormParams.Add("detection_new_faces", this.Configuration.ApiClient.ParameterToString(detectionNewFaces)); // form parameter
            if (setPersonId != null) localVarFormParams.Add("set_person_id", this.Configuration.ApiClient.ParameterToString(setPersonId)); // form parameter
            if (recognizeTargets != null) localVarFormParams.Add("recognize_targets", this.Configuration.ApiClient.ParameterToString(recognizeTargets)); // form parameter
            if (recognizeParameters != null) localVarFormParams.Add("recognize_parameters", this.Configuration.ApiClient.ParameterToString(recognizeParameters)); // form parameter
            if (originalFilename != null) localVarFormParams.Add("original_filename", this.Configuration.ApiClient.ParameterToString(originalFilename)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2MediaFilePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaUploadResponse)));
        }

        /// <summary>
        /// gets a media information. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="mediaUuid">the requested media identifier.</param>
        /// <returns>Media</returns>
        public Media V2MediaGet (Guid? apiKey, Guid? mediaUuid)
        {
             ApiResponse<Media> localVarResponse = V2MediaGetWithHttpInfo(apiKey, mediaUuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// gets a media information. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="mediaUuid">the requested media identifier.</param>
        /// <returns>ApiResponse of Media</returns>
        public ApiResponse< Media > V2MediaGetWithHttpInfo (Guid? apiKey, Guid? mediaUuid)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MediaApi->V2MediaGet");
            // verify the required parameter 'mediaUuid' is set
            if (mediaUuid == null)
                throw new ApiException(400, "Missing required parameter 'mediaUuid' when calling MediaApi->V2MediaGet");

            var localVarPath = "/v2/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", apiKey)); // query parameter
            if (mediaUuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media_uuid", mediaUuid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2MediaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Media>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Media) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Media)));
        }

        /// <summary>
        /// gets a media information. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="mediaUuid">the requested media identifier.</param>
        /// <returns>Task of Media</returns>
        public async System.Threading.Tasks.Task<Media> V2MediaGetAsync (Guid? apiKey, Guid? mediaUuid)
        {
             ApiResponse<Media> localVarResponse = await V2MediaGetAsyncWithHttpInfo(apiKey, mediaUuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// gets a media information. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="mediaUuid">the requested media identifier.</param>
        /// <returns>Task of ApiResponse (Media)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Media>> V2MediaGetAsyncWithHttpInfo (Guid? apiKey, Guid? mediaUuid)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MediaApi->V2MediaGet");
            // verify the required parameter 'mediaUuid' is set
            if (mediaUuid == null)
                throw new ApiException(400, "Missing required parameter 'mediaUuid' when calling MediaApi->V2MediaGet");

            var localVarPath = "/v2/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", apiKey)); // query parameter
            if (mediaUuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media_uuid", mediaUuid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2MediaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Media>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Media) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Media)));
        }

        /// <summary>
        /// gets a media information using SHA256 hash of media file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="checksum">SHA256 media file hash.</param>
        /// <returns>Media</returns>
        public Media V2MediaHashGet (Guid? apiKey, string checksum)
        {
             ApiResponse<Media> localVarResponse = V2MediaHashGetWithHttpInfo(apiKey, checksum);
             return localVarResponse.Data;
        }

        /// <summary>
        /// gets a media information using SHA256 hash of media file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="checksum">SHA256 media file hash.</param>
        /// <returns>ApiResponse of Media</returns>
        public ApiResponse< Media > V2MediaHashGetWithHttpInfo (Guid? apiKey, string checksum)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MediaApi->V2MediaHashGet");
            // verify the required parameter 'checksum' is set
            if (checksum == null)
                throw new ApiException(400, "Missing required parameter 'checksum' when calling MediaApi->V2MediaHashGet");

            var localVarPath = "/v2/media/hash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", apiKey)); // query parameter
            if (checksum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checksum", checksum)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2MediaHashGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Media>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Media) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Media)));
        }

        /// <summary>
        /// gets a media information using SHA256 hash of media file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="checksum">SHA256 media file hash.</param>
        /// <returns>Task of Media</returns>
        public async System.Threading.Tasks.Task<Media> V2MediaHashGetAsync (Guid? apiKey, string checksum)
        {
             ApiResponse<Media> localVarResponse = await V2MediaHashGetAsyncWithHttpInfo(apiKey, checksum);
             return localVarResponse.Data;

        }

        /// <summary>
        /// gets a media information using SHA256 hash of media file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">your API key or d45fd466-51e2-4701-8da8-04351c872236</param>
        /// <param name="checksum">SHA256 media file hash.</param>
        /// <returns>Task of ApiResponse (Media)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Media>> V2MediaHashGetAsyncWithHttpInfo (Guid? apiKey, string checksum)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MediaApi->V2MediaHashGet");
            // verify the required parameter 'checksum' is set
            if (checksum == null)
                throw new ApiException(400, "Missing required parameter 'checksum' when calling MediaApi->V2MediaHashGet");

            var localVarPath = "/v2/media/hash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", apiKey)); // query parameter
            if (checksum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checksum", checksum)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2MediaHashGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Media>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Media) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Media)));
        }

        /// <summary>
        /// upload media file using file uri or file content as base64 encoded string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request json body with parameters. (optional)</param>
        /// <returns>MediaUploadResponse</returns>
        public MediaUploadResponse V2MediaPost (MediaUpload body = null)
        {
             ApiResponse<MediaUploadResponse> localVarResponse = V2MediaPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// upload media file using file uri or file content as base64 encoded string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request json body with parameters. (optional)</param>
        /// <returns>ApiResponse of MediaUploadResponse</returns>
        public ApiResponse< MediaUploadResponse > V2MediaPostWithHttpInfo (MediaUpload body = null)
        {

            var localVarPath = "/v2/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2MediaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaUploadResponse)));
        }

        /// <summary>
        /// upload media file using file uri or file content as base64 encoded string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request json body with parameters. (optional)</param>
        /// <returns>Task of MediaUploadResponse</returns>
        public async System.Threading.Tasks.Task<MediaUploadResponse> V2MediaPostAsync (MediaUpload body = null)
        {
             ApiResponse<MediaUploadResponse> localVarResponse = await V2MediaPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// upload media file using file uri or file content as base64 encoded string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">request json body with parameters. (optional)</param>
        /// <returns>Task of ApiResponse (MediaUploadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaUploadResponse>> V2MediaPostAsyncWithHttpInfo (MediaUpload body = null)
        {

            var localVarPath = "/v2/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2MediaPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaUploadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaUploadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaUploadResponse)));
        }

    }
}
